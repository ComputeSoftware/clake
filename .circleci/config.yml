version: 2

defaults: &defaults
  working_directory: ~/repo
  docker:
    - image: circleci/clojure:tools-deps-node
  environment:
    JVM_OPTS: -Xmx3200m

install-local-clake: &install-local-clake
  run:
    name: Install Clake locally
    command: |
      cd cli
      sudo npm link

configure-git: &configure-git
  run:
    name: Configure Git
    command: |
      git config --global user.email "compute-ci@computesoftware.com"
      git config --global user.name "compute-ci"
      git branch --set-upstream-to=origin/$CIRCLE_BRANCH $CIRCLE_BRANCH

jobs:
  test-cli:
    <<: *defaults

    steps:
      - checkout

      - restore_cache:
          key: project

      - run: npm install --prefix cli

      - save_cache:
          paths:
            - ~/.m2
            - ~/cli/node_modules
          key: project

      - run:
          name: Test CLI
          command: |
            cd cli
            npx shadow-cljs release test
            node build-test/clake-tests.js

  build-cli:
    <<: *defaults

    steps:
      - checkout

      - restore_cache:
          key: project

      - run: npm install --prefix cli

      - run:
          name: Build CLI
          command: |
            cd cli
            ./scripts/release.sh

      - persist_to_workspace:
          root: cli
          paths:
            - build

  publish-cli:
    <<: *defaults

    steps:
      - checkout
      - attach_workspace:
          at: scripts

      - run:
          name: Move clake.js to build dir
          command: |
            mkdir cli/build
            mv scripts/build/clake.js cli/build/clake.js

      - *configure-git

      - run:
          name: Configure NPM
          command: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc

      - run:
          name: Bump version, commit, create tag, push
          command: |
            cd cli
            export NEW_VERSION=$(npm version patch)
            cd ..
            git add .
            git commit -m "$NEW_VERSION" -m "[ci skip]"
            git tag -a $NEW_VERSION -m ""
            git pull
            git push
            git push --tags
            echo $NEW_VERSION | cut -c 2- > cli_version.txt
      # save the new version to cli_version.txt (without the v - v1.0.0 -> 1.0.0)
      # so we can use it in other jobs
      - persist_to_workspace:
          root: ./
          paths:
            - cli_version.txt
      - run:
          name: NPM publish
          command: |
            cd cli
            npm publish

  test-jvm-code:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: cli
      - *install-local-clake
      - run:
          name: Test common
          command: |
            cd common
            clake -A :test test

  update-task-shas:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace:
          at: cli
      - *install-local-clake
      - *configure-git
      - run:
          name: Update SHAs
          command: |
            cd dev
            clake dev.ci/replace-git-sha --sha $CIRCLE_SHA1
            cd ..
            git add .
            git commit -m "Update SHAs" -m "[ci skip]"
            git pull
            git commit
            git push

  publish-docker-image:
    working_directory: ~/repo
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: workspace
      - run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
      - run:
          name: Build & push image
          command: |
            export VERSION=$(cat workspace/cli_version.txt)
            echo 'Building version' $VERSION
            docker build --build-arg clake_version=$VERSION -t computesoftware/clake:$VERSION docker
            docker push computesoftware/clake:$VERSION

workflows:
  version: 2
  ci-workflow:
    jobs:
      - test-cli:
          context: clojure-env
      - build-cli:
          context: clojure-env
      - publish-cli:
          requires:
            - test-cli
            - build-cli
            - test-jvm-code
          filters:
            branches:
              only:
                - master
      - publish-docker-image:
          requires:
            - publish-cli
          filters:
            branches:
              only:
                - master
      - test-jvm-code:
          context: clojure-env
          requires:
            - test-cli
            - build-cli
      - update-task-shas:
          context: clojure-env
          requires:
            - test-jvm-code